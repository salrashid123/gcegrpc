admin:
  access_log_path: /dev/null
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 9000

node:
  cluster: service_greeter
  id: test-id

static_resources:
  listeners:
  - name: listener_grpc
    address:
      socket_address: { address: 0.0.0.0, port_value: 50051 }
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          stat_prefix: ingress_http
          codec_type: AUTO
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match:
                  path: "/echo.EchoServer/SayHello"
                route: { cluster: local_grpc_endpoint  }
          http_filters:
          - name: envoy.router
            typed_config: {}
      tls_context:
        common_tls_context:
          alpn_protocols: h2
          tls_certificates:
            - certificate_chain:
                filename: "../../../certs/server_crt.pem"
              private_key:
                filename: "../../../certs/server_key.pem"
  - name: listener_hc
    address:
      socket_address: { address: 0.0.0.0, port_value: 8080 }
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        config:
          stat_prefix: ingress_http
          codec_type: AUTO
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match:
                  path: "/"
                route: { cluster: local_grpc_endpoint  }
          http_filters:

          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |

                function envoy_on_request(request_handle)
                  local headers, body = request_handle:httpCall(
                    "local_admin",
                    {
                      [":method"] = "GET",
                      [":path"] = "/clusters",
                      [":authority"] = "local_admin"
                    },"", 50)
                                     
                    str = "local_grpc_endpoint::127.0.0.1:50052::health_flags::healthy"
                    if string.match(body, str) then
                      request_handle:respond({[":status"] = "200"},"ok")
                    else
                      request_handle:respond({[":status"] = "503"},"unavailable")
                    end
                end

                function envoy_on_response(response_handle)
                  -- Do something.
                end
            
          - name: envoy.router
            typed_config: {}
      tls_context:
        common_tls_context:
          alpn_protocols: h2
          tls_certificates:
            - certificate_chain:
                filename: "../../../certs/server_crt.pem"
              private_key:
                filename: "../../../certs/server_key.pem"
  clusters:
  - name: local_grpc_endpoint
    connect_timeout: 0.05s
    type:  STATIC
    http2_protocol_options: {}
    lb_policy: ROUND_ROBIN
    common_lb_config:
      healthy_panic_threshold:
        value: 50.0   
    health_checks:
      - timeout: 1s
        interval: 5s
        interval_jitter: 1s
        no_traffic_interval: 5s
        unhealthy_threshold: 1
        healthy_threshold: 3
        grpc_health_check:
          service_name: "echo.EchoServer"
          authority: "server.domain.com"
    hosts:
    - socket_address:
        address: 127.0.0.1
        port_value: 50052

  - name: local_admin
    connect_timeout: 0.05s
    type:  STATIC
    lb_policy: ROUND_ROBIN
    hosts:
    - socket_address:
        address: 127.0.0.1
        port_value: 9000
