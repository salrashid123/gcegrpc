// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: src/echo/echo.proto

package echo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EchoServer_SayHello_FullMethodName       = "/echo.EchoServer/SayHello"
	EchoServer_SayHelloStream_FullMethodName = "/echo.EchoServer/SayHelloStream"
)

// EchoServerClient is the client API for EchoServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServerClient interface {
	SayHello(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error)
	SayHelloStream(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (EchoServer_SayHelloStreamClient, error)
}

type echoServerClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServerClient(cc grpc.ClientConnInterface) EchoServerClient {
	return &echoServerClient{cc}
}

func (c *echoServerClient) SayHello(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error) {
	out := new(EchoReply)
	err := c.cc.Invoke(ctx, EchoServer_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServerClient) SayHelloStream(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (EchoServer_SayHelloStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EchoServer_ServiceDesc.Streams[0], EchoServer_SayHelloStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &echoServerSayHelloStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoServer_SayHelloStreamClient interface {
	Recv() (*EchoReply, error)
	grpc.ClientStream
}

type echoServerSayHelloStreamClient struct {
	grpc.ClientStream
}

func (x *echoServerSayHelloStreamClient) Recv() (*EchoReply, error) {
	m := new(EchoReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServerServer is the server API for EchoServer service.
// All implementations should embed UnimplementedEchoServerServer
// for forward compatibility
type EchoServerServer interface {
	SayHello(context.Context, *EchoRequest) (*EchoReply, error)
	SayHelloStream(*EchoRequest, EchoServer_SayHelloStreamServer) error
}

// UnimplementedEchoServerServer should be embedded to have forward compatible implementations.
type UnimplementedEchoServerServer struct {
}

func (UnimplementedEchoServerServer) SayHello(context.Context, *EchoRequest) (*EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedEchoServerServer) SayHelloStream(*EchoRequest, EchoServer_SayHelloStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloStream not implemented")
}

// UnsafeEchoServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServerServer will
// result in compilation errors.
type UnsafeEchoServerServer interface {
	mustEmbedUnimplementedEchoServerServer()
}

func RegisterEchoServerServer(s grpc.ServiceRegistrar, srv EchoServerServer) {
	s.RegisterService(&EchoServer_ServiceDesc, srv)
}

func _EchoServer_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoServer_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServerServer).SayHello(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoServer_SayHelloStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServerServer).SayHelloStream(m, &echoServerSayHelloStreamServer{stream})
}

type EchoServer_SayHelloStreamServer interface {
	Send(*EchoReply) error
	grpc.ServerStream
}

type echoServerSayHelloStreamServer struct {
	grpc.ServerStream
}

func (x *echoServerSayHelloStreamServer) Send(m *EchoReply) error {
	return x.ServerStream.SendMsg(m)
}

// EchoServer_ServiceDesc is the grpc.ServiceDesc for EchoServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "echo.EchoServer",
	HandlerType: (*EchoServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _EchoServer_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloStream",
			Handler:       _EchoServer_SayHelloStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/echo/echo.proto",
}
